#include <Wire.h>
#include "Adafruit_TCS34725.h"
#include <Stepper.h>
#define TCA9548A_ADDR 0x70
Adafruit_TCS34725 sensors[3] = {
  Adafruit_TCS34725(TCS34725_INTEGRATIONTIME_50MS, TCS34725_GAIN_1X),
  Adafruit_TCS34725(TCS34725_INTEGRATIONTIME_50MS, TCS34725_GAIN_1X),
  Adafruit_TCS34725(TCS34725_INTEGRATIONTIME_50MS, TCS34725_GAIN_1X)
};

//Pinbelegung
int stepsToMove = 512;
const int IN1 = 42;
const int IN2 = 44;
const int IN3 = 46;
const int IN4 = 48;
const int stepsPerRevolution = 2048;
const int trigHinten = 13;
const int echoHinten = 12;
const int trigRechts = 11;
const int echoRechts = 10;
const int trigVorne = 7;
const int echoVorne = 6;
const int trigLinks = 9;
const int echoLinks = 8;
const int motor1Backward = 26;
const int motor1Forward = 24;
const int motor2Backward = 28;
const int motor2Forward = 30;
const int motor3Forward = 32;
const int motor3Backward = 34;
const int motor4Forward = 38;
const int motor4Backward = 36;
const int Enable1 = 2;
const int Enable2 = 3;
const int Enable3 = 4;
const int Enable4 = 5;
const int buzzerPin = 50;
//Variabeln
int Speed = 100;
int Rechtsdrehung = 540;
int Linksdrehung = 650;

void setup() {
  Serial.begin(9600);
  Serial1.begin(31250);  // Zweiter Monitor f체r Ultraschallsensoren
  pinMode(IN1, OUTPUT);
  pinMode(IN2, OUTPUT);
  pinMode(IN3, OUTPUT);
  pinMode(IN4, OUTPUT);
  pinMode(trigVorne, OUTPUT);
  pinMode(echoVorne, INPUT);
  pinMode(trigRechts, OUTPUT);
  pinMode(echoRechts, INPUT);
  pinMode(trigHinten, OUTPUT);
  pinMode(echoHinten, INPUT);
  pinMode(motor1Forward, OUTPUT);
  pinMode(motor1Backward, OUTPUT);
  pinMode(motor2Forward, OUTPUT);
  pinMode(motor2Backward, OUTPUT);
  pinMode(motor3Forward, OUTPUT);
  pinMode(motor3Backward, OUTPUT);
  pinMode(motor4Forward, OUTPUT);
  pinMode(motor4Backward, OUTPUT);
  pinMode(Enable1, OUTPUT);
  pinMode(Enable2, OUTPUT);
  pinMode(Enable3, OUTPUT);
  pinMode(Enable4, OUTPUT);
  pinMode(buzzerPin, OUTPUT);
  for (uint8_t i = 0; i < 3; i++) {  // Nur 3 Sensoren initialisieren
    selectChannel(i);
    sensors[i].begin();
  }
  Serial.println("Setup abgeschlossen, loop startet...");
  digitalWrite(buzzerPin, HIGH);
  delay(500);
  digitalWrite(buzzerPin, LOW);
}

void loop() {
  Serial.println(readUs(trigLinks, echoLinks));
  vorne();
  const char* positionen[] = { "Hinten", "Vorne", "Rechts" };  // Nur 3 Positionen

  for (int i = 0; i < 3; i++) {  // Nur 3 Sensoren durchlaufen
    uint16_t b = blue(i);
    uint16_t r = red(i);
    uint16_t g = green(i);

    Serial1.print("Vorne: ");
    Serial1.println(readUs(trigVorne, echoVorne));
    Serial1.print("Hinten: ");
    Serial1.println(readUs(trigHinten, echoHinten));
    Serial1.print("Rechts: ");
    Serial1.println(readUs(trigRechts, echoRechts));

    Serial.print(positionen[i]);  // Position ausgeben
    Serial.print(": ");
    Serial.print(r);
    // Serial.print(r);  // Farbwert ausgeben
    // Serial.print("   ");

    if (r < 8) {
      Serial.print(positionen[i]);
      Serial.println(": Schwarz");
      back();
      delay(500);
      drehenr(Rechtsdrehung * 2);
      vorne();
      delay(700);
    } else if (r < 20 && r > 8) {
      Serial.print(positionen[i]);
      Serial.println(": Rot");
      dropkit();
      stopt(5000);
      vorne();
      delay(700);
    }
    Serial.println();
  }

  if (readUs(trigRechts, echoRechts) > 10) {
    back();
    delay(300);
    drehenr(Rechtsdrehung);
    delay(1000);
    vorne();
    delay(500);
  } else if (readUs(trigVorne, echoVorne) < 10 && readUs(trigRechts, echoRechts) < 10) {
    drehenl(Linksdrehung);
    vorne();
    delay(700);
  }
}
void stepMotor(int step) {
  switch (step % 4) {
    case 0:
      digitalWrite(IN1, HIGH);
      digitalWrite(IN2, LOW);
      digitalWrite(IN3, HIGH);
      digitalWrite(IN4, LOW);
      break;
    case 1:
      digitalWrite(IN1, LOW);
      digitalWrite(IN2, HIGH);
      digitalWrite(IN3, HIGH);
      digitalWrite(IN4, LOW);
      break;
    case 2:
      digitalWrite(IN1, LOW);
      digitalWrite(IN2, HIGH);
      digitalWrite(IN3, LOW);
      digitalWrite(IN4, HIGH);
      break;
    case 3:
      digitalWrite(IN1, HIGH);
      digitalWrite(IN2, LOW);
      digitalWrite(IN3, LOW);
      digitalWrite(IN4, HIGH);
      break;
  }
}

void dropkit() {
  stop();
  for (int i = 0; i < 177; i++) {
    stepMotor(i);
    delay(10);
  }
}
void vorne() {                       // vorne
  digitalWrite(motor1Forward, LOW);  //HL
  digitalWrite(motor1Backward, HIGH);
  digitalWrite(motor2Forward, LOW);  //VL
  digitalWrite(motor2Backward, HIGH);
  digitalWrite(motor3Forward, LOW);  //VR
  digitalWrite(motor3Backward, HIGH);
  digitalWrite(motor4Forward, LOW);  //HR
  digitalWrite(motor4Backward, HIGH);
  analogWrite(Enable1, Speed);
  analogWrite(Enable2, Speed);
  analogWrite(Enable3, Speed);
  analogWrite(Enable4, Speed);
}
void back() {                         // r체ckw채rts
  digitalWrite(motor1Forward, HIGH);  // HL
  digitalWrite(motor1Backward, LOW);
  digitalWrite(motor2Forward, HIGH);  // VL
  digitalWrite(motor2Backward, LOW);
  digitalWrite(motor3Forward, HIGH);  // VR
  digitalWrite(motor3Backward, LOW);
  digitalWrite(motor4Forward, HIGH);  // HR
  digitalWrite(motor4Backward, LOW);
  analogWrite(Enable1, Speed);
  analogWrite(Enable2, Speed);
  analogWrite(Enable3, Speed);
  analogWrite(Enable4, Speed);
}
void stopt(int time) {
  digitalWrite(motor1Forward, HIGH);  //HL
  digitalWrite(motor1Backward, LOW);
  digitalWrite(motor2Forward, HIGH);  //VL
  digitalWrite(motor2Backward, LOW);
  digitalWrite(motor3Forward, HIGH);  //VR
  digitalWrite(motor3Backward, LOW);
  digitalWrite(motor4Forward, HIGH);  //HR
  digitalWrite(motor4Backward, LOW);
  analogWrite(Enable1, Speed);
  analogWrite(Enable2, Speed);
  analogWrite(Enable3, Speed);
  analogWrite(Enable4, Speed);
  delay(time);
  digitalWrite(motor1Forward, LOW);
  digitalWrite(motor1Backward, LOW);
  digitalWrite(motor2Forward, LOW);
  digitalWrite(motor2Backward, LOW);
  digitalWrite(motor3Forward, LOW);
  digitalWrite(motor3Backward, LOW);
  digitalWrite(motor4Forward, LOW);
  digitalWrite(motor4Backward, LOW);
  digitalWrite(Enable1, LOW);
  digitalWrite(Enable2, LOW);
  digitalWrite(Enable3, LOW);
  digitalWrite(Enable4, LOW);
}
void stop() {
  digitalWrite(motor1Forward, LOW);
  digitalWrite(motor1Backward, LOW);
  digitalWrite(motor2Forward, LOW);
  digitalWrite(motor2Backward, LOW);
  digitalWrite(motor3Forward, LOW);
  digitalWrite(motor3Backward, LOW);
  digitalWrite(motor4Forward, LOW);
  digitalWrite(motor4Backward, LOW);
  digitalWrite(Enable1, LOW);
  digitalWrite(Enable2, LOW);
  digitalWrite(Enable3, LOW);
  digitalWrite(Enable4, LOW);
}
void drehenr(int time) {
  digitalWrite(motor1Forward, LOW);  //HL
  digitalWrite(motor1Backward, HIGH);
  digitalWrite(motor2Forward, LOW);  //VL
  digitalWrite(motor2Backward, HIGH);
  digitalWrite(motor3Forward, HIGH);  //VR
  digitalWrite(motor3Backward, LOW);
  digitalWrite(motor4Forward, HIGH);  //HR
  digitalWrite(motor4Backward, LOW);
  analogWrite(Enable1, Speed);
  analogWrite(Enable2, Speed);
  analogWrite(Enable3, Speed);
  analogWrite(Enable4, Speed);
  delay(time);
  digitalWrite(motor1Forward, LOW);
  digitalWrite(motor1Backward, LOW);
  digitalWrite(motor2Forward, LOW);
  digitalWrite(motor2Backward, LOW);
  digitalWrite(motor3Forward, LOW);
  digitalWrite(motor3Backward, LOW);
  digitalWrite(motor4Forward, LOW);
  digitalWrite(motor4Backward, LOW);
  digitalWrite(Enable1, LOW);
  digitalWrite(Enable2, LOW);
  digitalWrite(Enable3, LOW);
  digitalWrite(Enable4, LOW);
}
void drehenl(int time) {
  digitalWrite(motor1Forward, HIGH);  //HL
  digitalWrite(motor1Backward, LOW);
  digitalWrite(motor2Forward, HIGH);  //VL
  digitalWrite(motor2Backward, LOW);
  digitalWrite(motor3Forward, LOW);  //VR
  digitalWrite(motor3Backward, HIGH);
  digitalWrite(motor4Forward, LOW);  //HR
  digitalWrite(motor4Backward, HIGH);
  analogWrite(Enable1, Speed);
  analogWrite(Enable2, Speed);
  analogWrite(Enable3, Speed);
  analogWrite(Enable4, Speed);
  delay(time);
  digitalWrite(motor1Forward, LOW);
  digitalWrite(motor1Backward, LOW);
  digitalWrite(motor2Forward, LOW);
  digitalWrite(motor2Backward, LOW);
  digitalWrite(motor3Forward, LOW);
  digitalWrite(motor3Backward, LOW);
  digitalWrite(motor4Forward, LOW);
  digitalWrite(motor4Backward, LOW);
  digitalWrite(Enable1, LOW);
  digitalWrite(Enable2, LOW);
  digitalWrite(Enable3, LOW);
  digitalWrite(Enable4, LOW);
}
float readUs(int trigPin, int echoPin) {
  digitalWrite(trigPin, LOW);
  delayMicroseconds(2);
  digitalWrite(trigPin, HIGH);
  delayMicroseconds(10);
  digitalWrite(trigPin, LOW);

  long duration = pulseIn(echoPin, HIGH, 20000);  // Timeout auf 20 ms setzen
  if (duration == 0) {
    Serial1.print("Kein Echo empfangen an Pin ");
    Serial1.println(echoPin);
    return -1;  // Fehlerwert zur체ckgeben
  }
  return duration * 0.034 / 2;  // Umrechnung in cm
}
void selectChannel(uint8_t channel) {
  if (channel > 7) return;
  Wire.beginTransmission(TCA9548A_ADDR);
  Wire.write(1 << channel);
  Wire.endTransmission();
}
uint16_t red(uint8_t sensor) {
  selectChannel(sensor);
  uint16_t r, g, b, c;
  sensors[sensor].getRawData(&r, &g, &b, &c);
  return r;
}

uint16_t green(uint8_t sensor) {
  selectChannel(sensor);
  uint16_t r, g, b, c;
  sensors[sensor].getRawData(&r, &g, &b, &c);
  return g;
}

uint16_t blue(uint8_t sensor) {
  selectChannel(sensor);
  uint16_t r, g, b, c;
  sensors[sensor].getRawData(&r, &g, &b, &c);
  return b;
}
//1=Hinten 2=Vorne 3=Rechts 4=Links
